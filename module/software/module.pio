    ;;  MODULE PIO program
    ;;  Handles intermodule communication

    .program module_sio

;;; NOTE: This uses an absolute pin number for the clock!
idle:
    jmp PIN idle            ; Wait for data ready signal
    pull noblock            ; If there's TX data, put it into the shift stream
    mov ISR, OSR            ; ISR will be copied to OSR during the shift loop

    wait 0 GPIO 10

    .wrap_target
shift_loop:
    wait 1 GPIO 10          ; Capture rising edge of clock
    mov OSR, ISR            ; Copy current data to allow for transparent loopback shifting
    out PINS, 1         [6] ; Shift out the next bit
    in PINS, 1              ; Get the data in
    wait 0 GPIO 10          
    jmp PIN push_word       ; Keep shifting as long as the data ready signal is low
    .wrap

push_word:
    push noblock            ; Move shifted data into RX FIFO
    irq SET 0 rel           ; Done shifting, trigger an interrupt
    jmp idle



% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void module_sio_init(
    PIO pio,
    uint sm,
    uint offset,
    uint clk_pin,
    uint drdy_pin,
    uint tx_pin,
    uint rx_pin
    )
{
    // Config "object"
    pio_sm_config cfg = module_sio_program_get_default_config(offset);

    // Config output pins
    sm_config_set_jmp_pin(&cfg, drdy_pin);
    sm_config_set_out_pins(&cfg, tx_pin, 1); // One pin
    sm_config_set_in_pins(&cfg, rx_pin);
    
    // Set outputs to 0 initially
    pio_sm_set_pins_with_mask(
        pio,
        sm,
        0,
        (1u << tx_pin)
    );

    // Set output pins as outputs
    pio_sm_set_pindirs_with_mask(
        pio,
        sm,
        (1u << tx_pin),
        (1u << tx_pin) | (1u << clk_pin) | (1u << rx_pin) | (1u << drdy_pin)
      );

    // More IO init
    pio_gpio_init(pio, tx_pin);
    pio_gpio_init(pio, rx_pin);
    pio_gpio_init(pio, clk_pin);
    pio_gpio_init(pio, drdy_pin);

    // Enable the interrupt source for this state machine.
    // Since rel is used on the IRQ instruction above,
    // we need to take into account the state machine (sm)
    // number. See:
    // https://github.com/dangarbri/pico-pio-isr/blob/main/src/simply_isr.pio
    // pio_set_irq0_source_enabled(pio, (pio_interrupt_source)(pis_interrupt0 + sm), true);
    
    // And make sure that the interrupt is initially cleared
    // This can be done "after" enabling the interrupt because
    // the interrupt does not actually get enabled until the
    // pio_sm_init function is called later on and uses the
    // config values to initialize the HW state machine.
    // pio_interrupt_clear(pio, sm);
    
    // Output shift register
    // BOOL right_shift, BOOL auto_push, 1..32 push_threshold
    sm_config_set_out_shift(&cfg, true, false, 32);

    pio_sm_init(pio, sm, offset, &cfg);

    // Start state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}


    
