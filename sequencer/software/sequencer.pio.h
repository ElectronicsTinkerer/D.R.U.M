// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// seq_rx //
// ------ //

#define seq_rx_wrap_target 0
#define seq_rx_wrap 5

static const uint16_t seq_rx_program_instructions[] = {
            //     .wrap_target
    0x00c0, //  0: jmp    pin, 0                     
    0x2020, //  1: wait   0 pin, 0                   
    0x20a0, //  2: wait   1 pin, 0                   
    0x4001, //  3: in     pins, 1                    
    0x00c1, //  4: jmp    pin, 1                     
    0x8000, //  5: push   noblock                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program seq_rx_program = {
    .instructions = seq_rx_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config seq_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + seq_rx_wrap_target, offset + seq_rx_wrap);
    return c;
}
#endif

// ------ //
// seq_tx //
// ------ //

#define seq_tx_wrap_target 0
#define seq_tx_wrap 4

static const uint16_t seq_tx_program_instructions[] = {
            //     .wrap_target
    0x80e0, //  0: pull   ifempty block              
    0xe000, //  1: set    pins, 0                    
    0x6001, //  2: out    pins, 1                    
    0xe001, //  3: set    pins, 1                    
    0x00e1, //  4: jmp    !osre, 1                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program seq_tx_program = {
    .instructions = seq_tx_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config seq_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + seq_tx_wrap_target, offset + seq_tx_wrap);
    return c;
}

#include "hardware/gpio.h"
static inline void seq_tx_init(PIO pio, uint sm, uint offset, uint clk_pin, uint tx_pin, fload frequency)
{
    // Config "object"
    pio_sm_config cfg = __program_get_default_config(offset);
    // Config output pins
    sm_config_set_out_ins(&cfg, clk_pin, 1); // One pin
    sm_config_set_out_ins(&cfg, tx_pin, 1); // One pin
    // Configure PIO clock rate
    float clk_div = (float) clock_get_hz(clk_sys) / frequency * 1000;
    sm_config_set_clkdiv(&cfg, clk_div);
    // Output shift register
    // BOOL right_shift, BOOL auto_push, 1..32 push_threshold
    sm_config_set_out_shift(&config, true, false, 32);
    pio_sm_init(pio, sm, offset, &cfg);
    // Start state machine
    pio_sm_set_enabled(pio, sm, true);
}

#endif

